openapi: 3.1.0
info:
  title: Project Tracker API
  description: "API for managing projects, tasks and developers"
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/v1/tasks/{id}:
    get:
      tags:
      - task-controller
      summary: Get a task by ID
      operationId: getTaskById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskDTO"
    put:
      tags:
      - task-controller
      summary: Update an existing task
      operationId: updateTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskDTO"
    delete:
      tags:
      - task-controller
      summary: Delete a task by ID
      operationId: deleteTask
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /api/v1/projects/{id}:
    get:
      tags:
      - project-controller
      summary: Get a project by ID
      operationId: getProjectById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProjectDTO"
    put:
      tags:
      - project-controller
      summary: Update an existing project
      operationId: updateProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProjectDTO"
    delete:
      tags:
      - project-controller
      summary: Delete a project by ID
      operationId: deleteProject
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /api/v1/developers/{id}:
    get:
      tags:
      - developer-controller
      summary: Get a developer by ID
      operationId: getDeveloperById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DeveloperDTO"
    put:
      tags:
      - developer-controller
      summary: Update an existing developer
      operationId: updateDeveloper
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeveloperDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DeveloperDTO"
    delete:
      tags:
      - developer-controller
      summary: Delete a developer by ID
      operationId: deleteDeveloper
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
  /api/v1/tasks:
    get:
      tags:
      - task-controller
      summary: Get all tasks with pagination
      operationId: getAllTasks
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageTaskDTO"
    post:
      tags:
      - task-controller
      summary: Create a new task
      operationId: createTask
      parameters:
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskDTO"
  /api/v1/projects:
    get:
      tags:
      - project-controller
      summary: Get all projects with pagination
      operationId: getAllProjects
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageProjectDTO"
    post:
      tags:
      - project-controller
      summary: Create a new project
      operationId: createProject
      parameters:
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProjectDTO"
  /api/v1/developers:
    get:
      tags:
      - developer-controller
      summary: Get all developers with pagination
      operationId: getAllDevelopers
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageDeveloperDTO"
    post:
      tags:
      - developer-controller
      summary: Create a new developer
      operationId: createDeveloper
      parameters:
      - name: X-Actor-Name
        in: header
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeveloperDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DeveloperDTO"
  /hello:
    get:
      tags:
      - hello-controller
      operationId: hello
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/tasks/project/{projectId}:
    get:
      tags:
      - task-controller
      summary: Get tasks by project ID with pagination
      operationId: getTasksByProject
      parameters:
      - name: projectId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageTaskDTO"
  /api/v1/tasks/overdue:
    get:
      tags:
      - task-controller
      summary: Get overdue tasks
      operationId: getOverdueTasks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskDTO"
  /api/v1/tasks/developer/{developerId}:
    get:
      tags:
      - task-controller
      summary: Get tasks by developer ID with pagination
      operationId: getTasksByDeveloper
      parameters:
      - name: developerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageTaskDTO"
  /api/v1/projects/without-tasks:
    get:
      tags:
      - project-controller
      summary: Get projects without tasks
      operationId: getProjectsWithoutTasks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectDTO"
  /api/v1/logs:
    get:
      tags:
      - audit-log-controller
      summary: Get all logs with pagination
      operationId: getAllLogs
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageAuditLog"
  /api/v1/logs/filter:
    get:
      tags:
      - audit-log-controller
      summary: Get logs by entity type or actor name
      operationId: getFilteredLogs
      parameters:
      - name: entityType
        in: query
        required: false
        schema:
          type: string
      - name: actorName
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuditLog"
  /api/v1/developers/top:
    get:
      tags:
      - developer-controller
      summary: Get top 5 developers
      operationId: getTopDevelopers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeveloperDTO"
components:
  schemas:
    TaskDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          maxLength: 100
          minLength: 0
        description:
          type: string
          maxLength: 500
          minLength: 0
        status:
          type: string
          enum:
          - TODO
          - IN_PROGRESS
          - DONE
          - BLOCKED
        dueDate:
          type: string
          format: date
        projectId:
          type: integer
          format: int64
        developerIds:
          type: array
          items:
            type: integer
            format: int64
          uniqueItems: true
      required:
      - title
    ProjectDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
          minLength: 0
        description:
          type: string
          maxLength: 500
          minLength: 0
        deadline:
          type: string
          format: date
        status:
          type: string
          enum:
          - NOT_STARTED
          - IN_PROGRESS
          - COMPLETED
          - ON_HOLD
      required:
      - name
    DeveloperDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
          minLength: 0
        email:
          type: string
        skills:
          type: string
          maxLength: 500
          minLength: 0
      required:
      - email
      - name
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageTaskDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/TaskDTO"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageProjectDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ProjectDTO"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    AuditLog:
      type: object
      properties:
        id:
          type: string
        actionType:
          type: string
        entityType:
          type: string
        entityId:
          type: string
        timestamp:
          type: string
          format: date-time
        actorName:
          type: string
        payload:
          type: object
          additionalProperties:
            type: object
    PageAuditLog:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/AuditLog"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageDeveloperDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/DeveloperDTO"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
